<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://lastloper.github.io/</id><title>로퍼즈와 비밀의 방</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2023-01-08T15:29:58+00:00</updated> <author> <name>Loperz And The Chamber Of Secrets</name> <uri>https://lastloper.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://lastloper.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://lastloper.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 Loperz And The Chamber Of Secrets </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>StackView 안쪽으로 margin? padding? 여백 주는 방법!</title><link href="https://lastloper.github.io/posts/stackview-margin/" rel="alternate" type="text/html" title="StackView 안쪽으로 margin? padding? 여백 주는 방법!" /><published>2023-01-08T02:00:00+00:00</published> <updated>2023-01-08T02:00:00+00:00</updated> <id>https://lastloper.github.io/posts/stackview-margin/</id> <content src="https://lastloper.github.io/posts/stackview-margin/" /> <author> <name>WalterCho</name> </author> <category term="iOS" /> <category term="Guide" /> <summary> StackView는 AutoLayout을 보다 편하게 구성할 수 있도록 해주는 View라서 복잡한 Layout을 구현하기에 딱 좋은 것 같아요. 그런데 이번에 이 StackView의 안쪽으로 여백을 줘야할 일이 있어 찾아 정리해봤습니다! StoryBoard에서 여백주기 스토리보드에서 주는 방법은 비교적 간단합니다. 안쪽 여백은 없는 StackView 좌우 16씩 여백을 주었고, StackView의 백그라운드 색상은 회색! 그런데 View와 View 간격인 Spacing 부분외에는 안보이죠? 바깥쪽은 16씩 간격을 띄웠지만, 안쪽에는 여백이 없다는 뜻이에요. 이제 스택뷰를 선택하시고 오른쪽 인스펙터의 메뉴를 보면, Layout Margins라는 속성이 있습니다. 이 버튼을 누르고 Languag... </summary> </entry> <entry><title>애플의 강력한 프로그래밍 언어, Swift의 특징</title><link href="https://lastloper.github.io/posts/about-features-of-swift/" rel="alternate" type="text/html" title="애플의 강력한 프로그래밍 언어, Swift의 특징" /><published>2023-01-01T02:12:00+00:00</published> <updated>2023-01-08T15:27:20+00:00</updated> <id>https://lastloper.github.io/posts/about-features-of-swift/</id> <content src="https://lastloper.github.io/posts/about-features-of-swift/" /> <author> <name>WalterCho</name> </author> <category term="Swift" /> <category term="특징" /> <summary> Swift는 애플에서 개방한 프로그래밍 언어죠? 애플의 모든 제품 앱을 만들 수 있는데요. 과연 어떤 특징들이 있는지 한번 살펴보겠습니다~! 언어적 특징 현대 프로그래밍 언어에서 Swift는 어떤 특장점이 있을까요? 안정성(nil-Safe) 스위프트는 안전한 프로그래밍을 지향합니다. 옵셔널과 빠른 탈출 구문들이 대표적인 예죠. guard let 문이나 if let 구문 같은 것들이요. 그 외에도 오류처리, 강력한 타입 통제등은 개발자가 할 수 있는 사소한 오류들을 방지할 수 있도록 해줍니다. 신속성(Fast) 거슬러 올라가면 Swift는 C언어에서 출발합니다. 그래서 나온 것이 Obejectiv-C인거 다 알고 계시죠? 그리고 Objective-C를 업그레이드 한 ... </summary> </entry> <entry><title>어려운 RxSwift! Observable 함수 정리</title><link href="https://lastloper.github.io/posts/rxswift-methods/" rel="alternate" type="text/html" title="어려운 RxSwift! Observable 함수 정리" /><published>2022-12-28T05:56:00+00:00</published> <updated>2022-12-28T05:56:00+00:00</updated> <id>https://lastloper.github.io/posts/rxswift-methods/</id> <content src="https://lastloper.github.io/posts/rxswift-methods/" /> <author> <name>WalterCho</name> </author> <category term="RxSwift" /> <category term="Methods" /> <summary> Observer 선언 Observable은 선언만 해서는 동작하지 않는다. 말 그대로 ‘관측가능한’ 상태이기 때문이다. 반드시 구독(subscribe)을 해야만 작동한다. 아무도 보지 않는데 동작할 이유가 없다. Just 단 1개의 요소만 방출하는 함수다. Observable&amp;lt;Int&amp;gt;.just(1) Of 1개 이상의 요소들을 방출하는 함수다. 쉼표로 구분해서 나열하거나 배열을 방출할 수도 있다. //여러개의 요소를 방출하는 Obsevable Sequence Observable&amp;lt;Int&amp;gt;.of(1, 2, 3, 4, 5) //1 //2 //3 //4 //5 //배열을 방출하며 이때 타입은 &amp;lt;Array&amp;gt;가 된다. //1개의 배열을 방출한다는 점에서 just와 같은 기능을... </summary> </entry> <entry><title>iOS에서 쓰는 Swift 클로저! 톺아보기 1편</title><link href="https://lastloper.github.io/posts/understanding-closure1/" rel="alternate" type="text/html" title="iOS에서 쓰는 Swift 클로저! 톺아보기 1편" /><published>2022-12-23T06:23:00+00:00</published> <updated>2022-12-23T06:23:00+00:00</updated> <id>https://lastloper.github.io/posts/understanding-closure1/</id> <content src="https://lastloper.github.io/posts/understanding-closure1/" /> <author> <name>WalterCho</name> </author> <category term="Swift" /> <category term="Grammer" /> <summary> 먼저 Swift는 굉장히 현대적인 프로그래밍 언어입니다. 그래서 클로저, 타입추론, 옵셔널등 현대 프로그래밍 언어의 주요기능들을 대부분 채택했는데요. 이 중에서 클로저에 대해 알아볼까 합니다. 클로저는 다른 언어에서 람다식, 고차함수등으로 불리기도 하는데, 개념도, 사용법도 거~의 흡사합니다. 특장점도 비슷하죠. 클로저는 코드를 더 간결하게 만들 수 있어요. 클로저는 함수형 프로그래밍이라서 외부 요인으로 인한 오류를 최소화할 수 있어요. 이로인해 클로저는 병렬처리에 유용합니다. 클로저의 기본 형태는 다음과 같습니다. { (parameters) -&amp;gt; return type in //TODO } Swift에서 클로저는 다른 말로 익명함수라고도 합니다. 하지만 함수라는 사실은... </summary> </entry> <entry><title>프로그램이 사용하는 메모리 영역 Code, Data, Stack, Heap</title><link href="https://lastloper.github.io/posts/about-memory-area/" rel="alternate" type="text/html" title="프로그램이 사용하는 메모리 영역 Code, Data, Stack, Heap" /><published>2022-12-17T08:51:00+00:00</published> <updated>2022-12-17T08:51:00+00:00</updated> <id>https://lastloper.github.io/posts/about-memory-area/</id> <content src="https://lastloper.github.io/posts/about-memory-area/" /> <author> <name>WalterCho</name> </author> <category term="프로그래밍" /> <category term="개념" /> <summary> 프로그램은 컴퓨터의 어디에 저장될까요? 정답은 하드디스크! 그렇다면 프로그램은 어디서 실행될까요? 바로 메모리입니다. 일단 하드디스크에서 프로그램 정보를 읽어 메모리에 로드되는 것이죠. 이때 운영체제는 프로그램에 메모리를 할당해주는데, 클래스에 할당할 공간, 변수에 할당할 공간, 함수에 할당할 공간등이 정해집니다. 그 공간들이 바로 Code, Data, Stack, Heap 영역인 것입니다. 각 영역들을 살펴볼게요! Code 이른바 텍스트 영역이라고 해서 개발자가 작성한 소스코드가 저장되는 공간입니다. 명령문이 저장되는 공간이라고 생각하시면 편할 것 같은데요, 함수, 상수, 제어문등이 이에 속합니다. Data 전역/정적 변수들이 저장되는 공간이라고 볼 수 있습니다. 한번 선언되면 프로그램이 종료... </summary> </entry> </feed>
